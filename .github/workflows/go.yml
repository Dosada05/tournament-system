name: Build and Push Docker Image CI

on:
  push:
    branches: [ main ] # Запуск при пуше в main
    tags:
      - 'v*.*.*'      # Запуск при создании тегов вида v1.0.0
  workflow_dispatch:    # Разрешает ручной запуск

jobs:
  test:
    name: Run Tests with DB Schema
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
        ports:
          - "5432:5432" # Пробрасываем порт 5432 контейнера на 5432 хоста

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3' # ЗАМЕНИ НА СВОЮ АКТУАЛЬНУЮ ВЕРСИЮ GO (должна совпадать с Dockerfile)
          cache: true

      - name: Install dependencies
        run: go mod download && go mod verify

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -qq -y postgresql-client

      - name: Wait for PostgreSQL service
        run: |
          echo "Waiting for PostgreSQL (host='${{ secrets.TEST_DB_HOST }}', port='${{ secrets.TEST_DB_PORT }}')..."
          for i in {1..30}; do
            if PGPASSWORD=${{ secrets.TEST_DB_PASSWORD }} psql -h ${{ secrets.TEST_DB_HOST }} -U ${{ secrets.TEST_DB_USER }} -d ${{ secrets.TEST_DB_NAME }} -p ${{ secrets.TEST_DB_PORT }} -c '\q' &>/dev/null; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i: PostgreSQL not ready. Sleeping 2s..."
            sleep 2
          done
          echo "PostgreSQL timed out."
          exit 1
        env:
          TEST_DB_HOST: localhost # Сервис postgres доступен по localhost для других шагов
          TEST_DB_PORT: 5432    # Порт, который мы пробросили из сервиса
          # TEST_DB_USER, TEST_DB_PASSWORD, TEST_DB_NAME используются напрямую из секретов в команде

      - name: Apply DB Schema
        run: PGPASSWORD=${{ secrets.TEST_DB_PASSWORD }} psql -h localhost -U ${{ secrets.TEST_DB_USER }} -d ${{ secrets.TEST_DB_NAME }} -p 5432 -a -f ./db/migrations/000001_init_schema.up.sql
        # Используем localhost и порт 5432, так как они определены в services и ports
        # Убедись, что путь ./db/migrations/000001_init_schema.up.sql корректен относительно корня репозитория

      - name: Run Go tests
        run: go test -v ./...
        env:
          # Эти переменные ожидает твой config.Load()
          DATABASE_URL: "postgres://${{ secrets.TEST_DB_USER }}:${{ secrets.TEST_DB_PASSWORD }}@localhost:5432/${{ secrets.TEST_DB_NAME }}?sslmode=disable"
          JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET_KEY }} # Важно для тестов, если они используют JWT
          SERVER_PORT: "8081" # Можно использовать другой порт для тестов, если нужно

          # Переменные для Cloudflare R2 (используй мок-значения или реальные тестовые, если тесты их требуют)
          R2_ACCOUNT_ID: ${{ secrets.TEST_R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.TEST_R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.TEST_R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.TEST_R2_BUCKET_NAME }}
          R2_PUBLIC_BASE_URL: ${{ secrets.TEST_R2_PUBLIC_BASE_URL }}

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # Запускается только после успешного завершения тестов

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: yernursarzh/tournament-system # ЗАМЕНИ yernursarzh на свой Docker Hub username
          tags: |
            # Тег для не-main веток (например, branch-feature-xyz)
            type=ref,event=branch,prefix=branch-,enable=${{ github.ref_name != 'main' && github.ref_type == 'branch' }}
            # Теги для релизов (например, v1.0.0, v1.0.1)
            type=ref,event=tag
            # Короткий хеш коммита (например, abc1234)
            type=sha,format=short
            # Тег 'latest' для main ветки и для релизных тегов
            type=raw,value=latest,enable=${{ github.ref_name == 'main' || github.ref_type == 'tag' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile # Указываем путь к твоему Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Используем кэш GitHub Actions для Docker слоев
          cache-to: type=gha,mode=max
