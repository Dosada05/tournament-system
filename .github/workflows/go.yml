name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  test:
    name: Run Tests with DB Schema
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
        ports:
          - "5432:5432"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.1' # Убедись, что версия Go актуальна и совпадает с Dockerfile
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -qq -y postgresql-client

      - name: Wait for PostgreSQL service to be ready
        run: |
          echo "Waiting for PostgreSQL to start (port 5432 to be open and DB to respond)..."
          # Сначала дождемся, пока GitHub Actions сделает порт доступным (это происходит до шагов)
          # Затем наш цикл проверит логическую готовность БД
          for i in {1..30}; do # Попытки в течение 60 секунд
            if PGPASSWORD=${{ secrets.TEST_DB_PASSWORD }} psql -h ${{ secrets.TEST_DB_HOST }} -U ${{ secrets.TEST_DB_USER }} -d ${{ secrets.TEST_DB_NAME }} -p ${{ secrets.TEST_DB_PORT }} -c '\q'; then
              echo "PostgreSQL is ready."
              exit 0
            fi
            if [ $i -eq 1 ]; then
              echo "Initial connection attempt failed. Service port might still be initializing."
              echo "PostgreSQL connection details: host='${{ secrets.TEST_DB_HOST }}', port='${{ secrets.TEST_DB_PORT }}', user='${{ secrets.TEST_DB_USER }}', db='${{ secrets.TEST_DB_NAME }}'"
            fi
            echo "Attempt $i: PostgreSQL not yet available. Sleeping for 2 seconds..."
            sleep 2
          done
          echo "PostgreSQL did not become ready in time."
          exit 1
        env:
          DB_HOST: ${{ secrets.TEST_DB_HOST }} # Должен быть localhost или 127.0.0.1
          DB_PORT: ${{ secrets.TEST_DB_PORT }} # Должен быть 5432
          DB_USER: ${{ secrets.TEST_DB_USER }}
          DB_NAME: ${{ secrets.TEST_DB_NAME }}

      - name: Apply DB Schema using psql
        run: PGPASSWORD=${{ secrets.TEST_DB_PASSWORD }} psql -h ${{ secrets.TEST_DB_HOST }} -U ${{ secrets.TEST_DB_USER }} -d ${{ secrets.TEST_DB_NAME }} -p ${{ secrets.TEST_DB_PORT }} -a -f $SCHEMA_FILE
        env:
          DB_HOST: ${{ secrets.TEST_DB_HOST }}
          DB_PORT: ${{ secrets.TEST_DB_PORT }}
          DB_USER: ${{ secrets.TEST_DB_USER }}
          DB_NAME: ${{ secrets.TEST_DB_NAME }}
          SCHEMA_FILE: ./db/migrations/000001_init_schema.up.sql

      - name: Run Go tests
        run: go test -v ./...
        env:
          TEST_DATABASE_URL: "postgres://${{ secrets.TEST_DB_USER }}:${{ secrets.TEST_DB_PASSWORD }}@${{ secrets.TEST_DB_HOST }}:${{ secrets.TEST_DB_PORT }}/${{ secrets.TEST_DB_NAME }}?sslmode=disable"

  # ... (остальная часть build-and-push) ...
  build-and-push:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: yernursarzh/tournament-system # Замени на свой Docker Hub username/image name
          tags: |
            type=ref,event=tag
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
